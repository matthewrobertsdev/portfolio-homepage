{"version":3,"sources":["LinkModel.js","ProjectInfos.js","ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["LinkModel","name","URL","this","ProjectInfo","title","description","links","keyboard","projectInfos","ProjectView","props","class","projectInfo","map","link","href","createLinkButtons","App","info","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAQeA,EALX,WAAYC,EAAMC,GAAK,oBACnBC,KAAKF,KAAKA,EACVE,KAAKD,IAAIA,GCHXE,EAKF,WAAYC,EAAOC,EAAaC,GAAO,yBAJvCF,MAAM,GAIgC,KAHtCC,YAAY,GAG0B,KAFtCC,MAAM,GAGFJ,KAAKE,MAAMA,EACXF,KAAKG,YAAYA,EACjBH,KAAKI,MAAMA,GAMNC,EAAS,IAAIJ,EAAY,WAAY,2EAElD,CAAC,IAAIJ,EAAU,uBAAwB,iDACvC,IAAIA,EAAU,uBAAwB,mDAuBzBS,EAAa,CArBA,IAAIL,EAAY,gBAAiB,qIAE7C,CAAC,IAAIJ,EAAU,gBAAiB,0DAC9C,IAAIA,EAAU,4BAA6B,wDAkBFQ,EAhBlB,IAAIJ,EAAY,YAAa,gFACV,CAAC,IAAIJ,EAAU,wBACzD,oDAEiC,IAAII,EAAY,sCACjD,oEACA,CAAC,IAAIJ,EAAU,kCACf,uEAEoC,IAAII,EAAY,+BACpD,iFACA,CAAC,IAAIJ,EAAU,uBACf,sEACA,IAAIA,EAAU,8BACd,sECrBeU,MAhBf,SAAqBC,GACjB,OACE,6BACE,wBAAIC,MAAM,cAAV,IAAyBD,EAAME,YAAYR,OAC3C,wBAAIO,MAAM,cAAV,IAAyBD,EAAME,YAAYP,aAQjD,SAA2BK,GACzB,OAAOA,EAAME,YAAYN,MAAMO,KAAI,SAACC,GAAQ,OAAO,uBAAGH,MAAM,0BAC9DI,KAAMD,EAAKb,KAAMa,EAAKd,SATfgB,CAAkBN,KCeZO,MAlBf,WACE,OACE,6BACE,wBAAIN,MAAM,oBAAV,6JAIF,uBAAGA,MAAM,0BAA0BI,KAAK,wCAAxC,aACA,6BAAS,6BAMFP,EAAaK,KAAI,SAACK,GAAQ,OAAO,6BAAK,kBAAC,EAAD,CAAaN,YAAaM,IAAO,mCCP9DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f02c5d27.chunk.js","sourcesContent":["class LinkModel{\n    name\n    URL\n    constructor(name, URL){\n        this.name=name;\n        this.URL=URL;\n    }\n}\nexport default LinkModel;","import LinkModel from './LinkModel';\n\nclass ProjectInfo{\n    title='';\n    description='';\n    links=[];\n\n    constructor(title, description, links){\n        this.title=title;\n        this.description=description;\n        this.links=links;\n    }\n}\n\nexport default ProjectInfo;\n\nexport const keyboard=new ProjectInfo('keyboard', 'A Java Application that Let\\'s '+\n'Your Computer Keyboard be a Piano Keyboard', \n[new LinkModel('Website for keyboard', 'https://matthewrobertsdev.github.io/keyboard/'),\nnew LinkModel('keyboard Github Repo', 'https://github.com/matthewrobertsdev/keyboard')])\n\nexport const bookmarkPage=new ProjectInfo('Bookmark Page', 'A react and redux application '+\n'that let\\'s you add, edit, delete, rearrange, save, and load bookmarks, with dark mode and '+\n'light mode', [new LinkModel('Bookmark Page', 'https://matthewrobertsdev.github.io/BookmarkPage/index'),\nnew LinkModel('Bookmark Page Github Repo', 'https://github.com/matthewrobertsdev/bookmark-page')])\n\nexport const contactQR=new ProjectInfo('ContactQR', 'A project for an iOS app that lets you '+\n'share your contact info using QR codes', [new LinkModel('ContactQR Github repo', \n'https://github.com/matthewrobertsdev/ContactQR')])\n\nexport const dbConnectionManager=new ProjectInfo('DBConnectionManager for SQL in Java', \n'A Class for Managing Connections from Java Code to a SQL Database', \n[new LinkModel('DBConnectionManager Github Repo', \n'https://github.com/matthewrobertsdev/DBConnectionManager-SQL-Java')])\n\nexport const softwareDeveloperLinks=new ProjectInfo('Software Developer Link Page', \n'A Page of Some Links for People Learning Software Development Built with React', \n[new LinkModel('Developer Links Page', \n'https://matthewrobertsdev.github.io/SoftwareDevelopmentLinks/index'),\nnew LinkModel('Developer Links Github Repo', \n'https://github.com/matthewrobertsdev/software-development-links')])\n\nexport const projectInfos=[bookmarkPage, keyboard, contactQR, dbConnectionManager, softwareDeveloperLinks];","import React from 'react';\nimport './App.css';\n\nfunction ProjectView(props) {\n    return (\n      <div>\n        <h2 class=\"text-color\"> {props.projectInfo.title}</h2>\n        <h3 class=\"text-color\"> {props.projectInfo.description}</h3>\n        {createLinkButtons(props)}\n      </div>\n    );\n\n    \n  }\n\n  function createLinkButtons(props){\n    return props.projectInfo.links.map((link)=>{return <a class=\"link-button grid-button\" \n  href={link.URL}>{link.name}</a>})\n  }\nexport default ProjectView","import React from 'react';\nimport './App.css';\nimport {projectInfos} from './ProjectInfos';\nimport ProjectView from './ProjectView';\n\nfunction App() {\n  return (\n    <div>\n      <h1 class=\"title text-color\">\n        My name is Matthew Roberts and I am a software developer and tutor. This page has links to some projects I have\n        on GitHub, and tells about them some too.\n    </h1>\n    <a class=\"link-button grid-button\" href=\"https://github.com/matthewrobertsdev\">My Github</a>\n    <br></br><br></br>\n    {createProjectViews()}\n    </div>\n  );\n\n  function createProjectViews(){\n    return projectInfos.map((info)=>{return <div><ProjectView projectInfo={info}/><br></br></div>})\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//document.body.style.backgroundColor = \"rgb(0, 166, 255)\";\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}